---
// src/components/Header.astro
import { IconMenu2 } from "@tabler/icons-react";
import LanguageSwitcher from "@/components/LanguageSwitcher.tsx"; // Import the React component (.tsx)

// Get current locale and pathname from Astro's global
const { currentLocale, url } = Astro;
const pathname = url.pathname; // Get the current pathname
const locale = currentLocale || "yue"; // Fallback to default if undefined

// --- Navigation Translations (copied from Next.js layout) ---
const navTranslations: Record<string, Record<string, string>> = {
  learn: {
    yue: "學粵拼",
    yue_hans: "学粤拼",
    en: "Learn Jyutping",
    vi: "Học Việt bính",
    nan: "學粵拼",
    wuu: "學粵拼",
    cmn: "學粵拼",
  },
  jyutping: {
    yue: "粵拼方案",
    yue_hans: "粤拼方案",
    en: "Jyutping Scheme",
    vi: "Việt bính",
    nan: "粵拼方案",
    wuu: "粵拼方案",
    cmn: "粵拼方案",
  },
  blog: {
    yue: "文章",
    yue_hans: "文章",
    en: "Blog",
    vi: "Tập văn",
    nan: "文章",
    wuu: "文章",
    cmn: "文章",
  },
  keyboard: {
    yue: "資源",
    yue_hans: "资源",
    en: "Resources",
    vi: "Tài liệu",
    nan: "資源",
    wuu: "資源",
    cmn: "資源",
  },
  about: {
    yue: "關於",
    yue_hans: "关于",
    en: "About",
    vi: "Liên lạc",
    nan: "關於",
    wuu: "關於",
    cmn: "關於",
  },
};

// --- Generate Localized Nav Links ---
const navLinkKeys = ["learn", "jyutping", "blog", "keyboard", "about"];
const navLinks = navLinkKeys.map((key) => {
  const baseHref = `/${key}`;
  // Prepend locale prefix only if it's not the default locale
  const href = locale === "yue" ? baseHref : `/${locale}${baseHref}`;
  return {
    href: href,
    title: navTranslations[key]?.[locale] || key, // Fallback to key name
  };
});

// Determine the correct base path for the logo link
const logoHref = locale === "yue" ? "/" : `/${locale}`;

const locales = ["en", "vi", "yue", "cmn", "nan", "wuu", "yue_hans"];
const defaultLocale = "yue";
---

<header class="relative p-4 bg-[#1678d3] text-white">
  <div class="flex justify-between items-center px-4">
    <a href={logoHref} class="text-white hover:opacity-80">
      <span class="text-3xl font-chiron-hei">粵拼</span>
      {/* Use font class */}
    </a>

    {/* Desktop Navigation */}
    <nav class="hidden md:flex space-x-12">
      {
        navLinks.map((link) => (
          <a href={link.href} class="text-white text-lg hover:opacity-90">
            {link.title}
          </a>
        ))
      }
    </nav>

    {/* Desktop Language Switcher */}
    <div class="hidden md:block">
      {/* Use client:load to hydrate the React component */}
      <LanguageSwitcher
        locales={locales}
        defaultLocale={defaultLocale}
        currentPathname={pathname}
        client:load
      />
    </div>

    {/* Mobile Menu Button */}
    <button
      type="button"
      class="md:hidden text-white cursor-pointer"
      aria-label="Toggle menu"
      id="mobile-menu-button"
    >
      <IconMenu2 size={24} />
    </button>

    {/* Mobile Menu Panel (hidden by default) */}
    <div
      id="mobile-menu-panel"
      class="bg-[#1678d3] text-white absolute top-full left-0 right-0 z-50 shadow-md md:hidden hidden"
    >
      <div class="px-8 py-4 flex flex-col space-y-4">
        {/* Mobile Navigation Links */}
        <nav class="flex flex-col space-y-2">
          {
            navLinks.map((link) => (
              <a href={link.href} class="text-white text-lg hover:opacity-80">
                {link.title}
              </a>
            ))
          }
        </nav>
        {/* Mobile Language Switcher */}
        <LanguageSwitcher
          locales={locales}
          defaultLocale={defaultLocale}
          currentPathname={pathname}
          client:load
        />
      </div>
    </div>
  </div>
</header>

<script>
  function setupMobileMenu() {
    const menuButton = document.getElementById("mobile-menu-button");
    const menuPanel = document.getElementById("mobile-menu-panel");

    if (menuButton && menuPanel) {
      // Remove potential old listener to prevent duplicates if script runs multiple times
      // (Though astro:page-load should handle this, it's safer)
      // Clone the button to effectively remove old listeners before adding new ones
      const newButton = menuButton.cloneNode(true);
      // Check if parentNode exists before replacing
      if (menuButton.parentNode) {
        menuButton.parentNode.replaceChild(newButton, menuButton);
      } else {
        // Fallback or error handling if button has no parent (shouldn't happen here)
        console.error("Menu button has no parent node.");
        return; // Exit if we can't replace the button
      }

      newButton.addEventListener("click", () => {
        menuPanel.classList.toggle("hidden");
      });

      // Optional: Close menu when a link inside it is clicked
      // Re-query links inside the panel each time to ensure they are fresh
      menuPanel.querySelectorAll("a").forEach((link) => {
        // Clone links as well to remove potential old listeners
        const newLink = link.cloneNode(true);
        // Check if parentNode exists before replacing
        if (link.parentNode) {
          link.parentNode.replaceChild(newLink, link);
        } else {
          // Handle case where link might not have a parent temporarily during DOM changes
          console.warn("Menu link has no parent node during setup.");
          // Attempt to add listener to original link as fallback, though it might be stale
          link.addEventListener("click", () => {
            if (!menuPanel.classList.contains("hidden")) {
              menuPanel.classList.add("hidden");
            }
          });
          return; // Continue to next link
        }

        newLink.addEventListener("click", () => {
          // Check if panel is open before adding hidden class
          if (!menuPanel.classList.contains("hidden")) {
            menuPanel.classList.add("hidden");
          }
        });
      });
    } else {
      // Add some logging if elements aren't found after navigation
      console.log("Mobile menu button or panel not found after page load.");
    }
  }

  // Run on initial page load
  setupMobileMenu();

  // Run after Astro navigations
  document.addEventListener("astro:page-load", setupMobileMenu);
</script>
